---
# Copyright 2016, JinkIT, and it's Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
- name: make sure that centralized keys directory exists
  file:
    path: /etc/ssh/authorized_keys
    state: directory
    owner: root
    group: root
    mode: "u=rwx,g=rx,o=rx"
  tags:
    - os-deploy-ssh
  tags:
    - all-keys

- name: configure sshd_config for our centralized keys directory
  lineinfile:
    dest: /etc/ssh/sshd_config
    line: 'AuthorizedKeysFile /etc/ssh/authorized_keys/%u'
    state: present
    create: True
    backup: yes
  register: ssh_config_changed
  tags:
    - all-keys

- name: restart sshd on the host
  service: name=ssh state=reloaded
  when: ssh_config_changed | changed
  tags:
    - all-keys

- name: upload os keys
  copy:
    src: includes/ssh_keys/{{item}}
    dest: /etc/ssh/authorized_keys/{{item}}
    owner: "{{item}}"
    group: nixadmins
    mode: "u=rw,g=r,o=r"
  with_items:
    - "{{ssh_users}}"
  tags:
    - all-keys

- name: upload os root keys
  copy:
    src: includes/ssh_keys/root
    dest: /etc/ssh/authorized_keys/root
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"
  tags:
    - all-keys

- name: clean up any per-user ssh key settings
  file:
    path: /home/{{item}}/.ssh/authorized_keys
    state: absent
  tags:
    - all-keys
  with_items:
    - "{{ssh_users}}"

- stat: path={{root_key}}
  register: key_exists
  when: inventory_hostname in groups['deploy']
  tags:
    - deploy-rootkey

- name: generate ssh keys for the deployment host
  shell: ssh-keygen -b 4096 -t rsa -C "root@{{os_domain}}" -f {{root_key}} -q -N ""
  args:
    creates: "{{root_key}}"
  when: (inventory_hostname in groups['deploy'] and key_exists.stat.exists  == False)
  tags:
    - deploy-rootkey
